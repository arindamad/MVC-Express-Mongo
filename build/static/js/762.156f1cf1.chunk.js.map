{"version":3,"file":"static/js/762.156f1cf1.chunk.js","mappings":"iQAgHA,EAxGkB,WAChB,IAAAA,GAA0BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GACtCI,GADYF,EAAA,GAAUA,EAAA,IACcD,EAAAA,EAAAA,UAAS,CAAC,IAAEI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAChDE,GADiBD,EAAA,GAAeA,EAAA,IACNJ,EAAAA,EAAAA,UAAS,KAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA/BE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,IAEtBG,EAAAA,EAAAA,YAAU,WAENC,MADWC,qDACA,CACTC,OAAQ,OACRC,SAAU,WAEXC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAM,IAChCF,MAAK,SAAAG,GAAYC,QAAQC,IAAIF,EAAOG,MAAOZ,EAASS,EAAOG,KAAM,IACjEC,OAAM,SAAAC,GAAK,OAAIJ,QAAQC,IAAI,QAASG,EAAM,GAE/C,GAAG,IAEH,IA2BAC,GAA8BvB,EAAAA,EAAAA,UAAS,CAAC,GAAEwB,GAAAtB,EAAAA,EAAAA,GAAAqB,EAAA,GAAnCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAM1B,OACEG,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACAC,EAAAA,EAAAA,KAACC,EAAAA,GAAc,KACbJ,EAAAA,EAAAA,MAAA,OAAKK,UAAU,2DAA0DH,SAAA,EACvEC,EAAAA,EAAAA,KAAA,MAAIE,UAAU,eAAcH,SAAC,WAC7BC,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACC,GAAI,cAAeF,UAAU,kBAAiBH,SAAC,YAEvDC,EAAAA,EAAAA,KAACK,EAAAA,GAAK,CAAAN,UACJC,EAAAA,EAAAA,KAACM,EAAAA,GAAS,CAAAP,UACRF,EAAAA,EAAAA,MAACU,EAAAA,GAAI,CAAAR,SAAA,EACHC,EAAAA,EAAAA,KAACQ,EAAAA,GAAI,CAACC,GAAId,EAAQe,MAAM,EAAE,GAAGX,UAC3BC,EAAAA,EAAAA,KAACO,EAAAA,GAAI,CAACL,UAAU,oBAAmBH,SAChCtB,EAAMkC,KAAI,SAACC,EAAMC,GAAG,OACnBb,EAAAA,EAAAA,KAACQ,EAAAA,GAAI,CAACC,GAAId,EAAQe,MAAM,EAAE,EAAEX,UAC1BC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,iBAAiBY,QAAS,WAjBzDlB,EAiB2EgB,EAAK,EAACb,UAC/DC,EAAAA,EAAAA,KAAA,OAAKe,IAAKlC,sCAA+B+B,EAAKF,MAAQM,IAAKJ,EAAKK,SAAUC,MAAO,YAFnDL,EAI3B,SAIbhB,EAAAA,EAAAA,MAACW,EAAAA,GAAI,CAACC,GAAId,EAAQe,MAAM,EAAE,GAAGX,SAAA,EAC3BC,EAAAA,EAAAA,KAACK,EAAAA,GAAK,CAAAN,UACJC,EAAAA,EAAAA,KAACM,EAAAA,GAAS,CAAAP,UACRC,EAAAA,EAAAA,KAAA,OAAKe,IAAKlC,sCAA+Bc,EAAQe,MAAQM,IAAKrB,EAAQsB,SAAUC,MAAO,aAIxF9B,QAAQC,IAAIM,eAwB7B,C","sources":["views/media/Media.js"],"sourcesContent":["import { cilPencil, cilTrash } from '@coreui/icons';\nimport CIcon from '@coreui/icons-react';\nimport { CButton, CCard, CCardBody, CCol, CModal, CModalBody, CModalFooter, CModalHeader, CModalTitle, CRow, CTable, CTableBody, CTableDataCell, CTableHead, CTableHeaderCell, CTableRow } from '@coreui/react'\nimport React, { useEffect, useState } from 'react'\nimport { Link } from 'react-router-dom';\nimport { ToastContainer, toast } from 'react-toastify'\nimport './Media.scss';\n\nconst MediaList = () => {\n  const [brand, setBrand] = useState([]);\n  const [updateList, setUpdateList] = useState({});\n  const [media, setMedia] = useState([])  \n\n  useEffect(() => {\n      let url =  process.env.REACT_APP_API_URL+\"images/list\"\n      fetch(url, {\n        method: 'POST',\n        redirect: 'follow'\n      })\n      .then(response => response.json())\n      .then(result => { console.log(result.data); setMedia(result.data) })\n      .catch(error => console.log('error', error));\n\n  }, []);\n\n  const handleDelete =(arg)=>{\n    let requestOptions = {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        \"_id\": arg\n      }),\n    };\n    const confirmWrp =  confirm(\"Are you sure you want to delete this?\");\n    if(!confirmWrp){\n      return;\n    }\n    fetch(process.env.REACT_APP_API_URL+\"images/list\", requestOptions)\n    .then(response => response.json())\n    .then(result => {\n      if(result.status==200){\n        toast.success(result.message);\n        // setUpdateList({\"_id\": arg});       \n      }else{\n        toast.error(result.message);\n      }\n    })\n    .catch(error => console.log('error', error)); \n  }\n\n  const [visible, setVisible] = useState({})\n\n  const openFullImage = (arg)=>{\n    setVisible(arg)\n  }\n\n  return (\n    <>\n    <ToastContainer />\n      <div className='d-flex justify-content-between  align-items-center  mb-4'>\n        <h1 className='headingType1'>Media</h1>\n        <Link to={'/brands/add'} className='btn btn-primary'>Add</Link>\n      </div>\n      <CCard>\n        <CCardBody>\n          <CRow>\n            <CCol lg={visible.image?7:12}>\n              <CRow className='sliderInfoWrapper'>\n                {media.map((item, key)=>(\n                  <CCol lg={visible.image?4:2} key={key}>\n                    <div className='each_image_wrp' onClick={()=>openFullImage(item)}>\n                      <img src={process.env.REACT_APP_BASE_URL+item.image}  alt={item.alt_text} width={'100%'}/>\n                    </div>\n                  </CCol>\n                ))}            \n              </CRow>\n            </CCol>  \n            <CCol lg={visible.image?5:12}>\n              <CCard>\n                <CCardBody>\n                  <img src={process.env.REACT_APP_BASE_URL+visible.image}  alt={visible.alt_text} width={'100%'}/>\n                </CCardBody>\n              </CCard>\n              \n                {console.log(visible)}\n            </CCol>          \n          </CRow>\n          \n        </CCardBody>\n      </CCard>\n\n     \n      {/* <CModal size='xl' visible={visible} onClose={() => setVisible(false)}>\n        <CModalHeader onClose={() => setVisible(false)}>\n          <CModalTitle>Modal title</CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          <p>Woohoo, you're reading this text in a modal!</p>\n        </CModalBody>\n        <CModalFooter>\n          <CButton color=\"secondary\" onClick={() => setVisible(false)}>\n            Close\n          </CButton>\n          <CButton color=\"primary\">Save changes</CButton>\n        </CModalFooter>\n      </CModal> */}\n    </>\n  )\n}\n\nexport default MediaList\n"],"names":["_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","_useState5","_useState6","media","setMedia","useEffect","fetch","process","method","redirect","then","response","json","result","console","log","data","catch","error","_useState7","_useState8","visible","setVisible","_jsxs","_Fragment","children","_jsx","ToastContainer","className","Link","to","CCard","CCardBody","CRow","CCol","lg","image","map","item","key","onClick","src","alt","alt_text","width"],"sourceRoot":""}