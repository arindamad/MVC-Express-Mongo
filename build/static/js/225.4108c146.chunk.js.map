{"version":3,"file":"static/js/225.4108c146.chunk.js","mappings":"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","sources":["views/product/editProduct.js"],"sourcesContent":["import { CButton, CCard, CCardBody, CCol, CForm, CFormCheck, CFormInput, CFormSelect, CFormText, CFormTextarea, CInputGroupText, CModal, CModalBody, CModalFooter, CModalHeader, CModalTitle, CNav, CNavItem, CNavLink, CRow, CTabContent, CTabPane, CTable, CTableBody, CTableDataCell, CTableHead, CTableHeaderCell, CTableRow } from '@coreui/react';\nimport React, { useEffect } from 'react'\nimport noImage from '../../assets/images/no-img.jpg';\n\nimport { EditorState, convertToRaw} from 'draft-js';\nimport { Editor } from 'react-draft-wysiwyg';\n\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { useState } from 'react';\nimport CIcon from '@coreui/icons-react';\nimport { cilPencil, cilPlus, cilTrash, cilX } from '@coreui/icons';\nimport \"./product.scss\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport {  useNavigate, useParams } from 'react-router-dom';\nimport { CustomTabs } from 'src/components';\n\n\n\nconst EditProduct = () => {\n  const Navigate =  useNavigate();\n  const [selectedImage, setSelectedImage] = useState({});\n  const [gallery, setSelectedGallery] = useState([]);\n  const [productVarition, setProductVarition] = useState(false);\n  const [attr, setAttr] = useState([]);\n  const [sprops, setProps] = useState('');\n  const [svalue, setValue] = useState('');\n  const [brands, setBrands]= useState([]);\n  const [category, setCateogy]= useState([]);\n  const [error, setError] = useState({});\n  const [images, setImages] = useState([]);\n  const [totalProduct, setTotalProduct] = useState([]);\n  const [fProduct, setFProduct] = useState([]);\n  const [selectedProd, setSelectedProd] = useState([]);  \n  const [product, setProduct]=useState({})\n\nconst handelSearch = (e) =>{\n  const regexPattern = new RegExp('^'+e.target.value, 'ig');\n  const filteredProduct =  totalProduct.filter((i)=>i.product_name.match(regexPattern));\n  setFProduct(filteredProduct);\n  setProdVisible(true)\n}\n\n\nconst handleSelectProd = (e) => {   \n    setSelectedProd((prevSelectedProd) => [...prevSelectedProd, e]);\n    setTotalProduct(prevSelected =>prevSelected.filter(item => item._id !== e._id));\n    setProdVisible(false)\n}\n\nconst [prodVisible, setProdVisible] = useState(true);\nconst handleDeleteProd = (e) => { \n  setTotalProduct((prevSelectedProd) => [...prevSelectedProd, e]);\n  setSelectedProd(prevSelected =>prevSelected.filter(item => item._id !== e._id));\n};\n\n\nuseEffect(() => {  \n  let url =  process.env.REACT_APP_API_URL+\"product/list\"\n  fetch(url, {\n    method: 'POST',\n    redirect: 'follow'\n  })\n  .then(response => response.json())\n  .then(result => {\n    setTotalProduct(result.data);   \n  })\n  .catch(error => console.log('error', error));\n\n}, []);\n\nconst handleBrand = (event) => {\n  setProduct({ ...product, brand: { _id: event.target.value } });\n};\n\n// const handleCategory=(event)=>{\n//   setProduct({ ...product, category: { _id: event.target.value } });\n// }\n\n  \n\n\n  \n  const handleImageChange2 = (event) => {\n    const files = event.target.files;\n  \n    if (files.length > 0) {\n      const filePromises = Array.from(files).map((file) => {\n        // Create a separate FormData for each file\n        const formData = new FormData();\n        formData.append(\"image\", file, file.name);\n        formData.append(\"type\", \"image\");\n  \n        const requestOptions = {\n          method: 'POST',\n          body: formData,\n          redirect: 'follow'\n        };\n  \n        // Make separate API calls for each file\n        return fetch(process.env.REACT_APP_API_URL + \"images/add\", requestOptions)\n          .then(response => response.json())\n          .catch(error => {\n            console.log('error', error);\n            return null; // Return null if an error occurs during the API call\n          });\n      });  \n     \n      Promise.all(filePromises).then((responses) => {       \n        const validResponses = responses.filter(response => response !== null).map(i=>i.data);\n        \n        setSelectedGallery(prev=>[...prev, ...validResponses]);\n      });\n    } else {\n      \n    }\n  };\n  \n  \n\n  const [editorState, setEditorState] = useState(\n    () => EditorState.createEmpty(), \n  );\nconst handelSubmit = (e)=>{\n    e.preventDefault();    \n    const [productName, productSku, productBrand, shortDescription,  form_check, url,  status] = e.target;\n    \n    let hasError  = false;\n    const error  = {};\n    console.log(productName, productSku, productBrand, shortDescription,  form_check,  url, status)\n    const data = {\n      _id:product._id,\n      product_name: productName.value,\n      sku: productSku.value,\n      short_description: shortDescription.value,        \n      brand:productBrand.value,\n      status: parseInt(status.value),\n      product_url: url.value,\n      photo: selectedImage._id,\n      photo_gallery: gallery ? gallery.map(i=>i._id) : [],\n      relatedProducts: selectedProd ? selectedProd.map(i=>i._id) : [],\n    }\n    console.log(JSON.stringify(data));\n\n    if(!data.product_name){\n      error['product-name'] = \"Please add a product Name\";\n      hasError = true;\n    }\n    if(!data.short_description){\n      error[\"description\"]=\"Please add Short description\";\n      hasError = true;\n    } \n\n    if(!data.brand){\n      error['product-brand'] = \"Please select a Brand Name\";\n      hasError = true;\n    } \n    setError(error)\n\n    console.log(error)\n\n   if(!hasError){\n    fetch(process.env.REACT_APP_API_URL+\"product/update\", {\n      method: 'POST',\n      headers:{\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data),\n      redirect: 'follow'\n    })\n    .then(response => response.json())\n    .then(result => {\n      if(result.status==200){\n        toast.success(result.message);\n        setTimeout(()=>{\n          Navigate(\"/products\")\n        }, 3000)\n      }\n    })\n    .catch(error => console.log('error', error));\n  }\n  }\n\n  // const handleAdd = () => {\n  //   if (sprops && svalue) {\n  //     setAttr((prev) => [...prev, { sProp: sprops, sValue: svalue }]);\n  //     setProps('');\n  //     setValue('');\n  //   } else {\n  //     toast.error('Please enter empty fields.');\n  //   }\n  // };\n  \n\n\n  useEffect(()=>{ \n      let url =  process.env.REACT_APP_API_URL+\"brand/list\"\n      fetch(url, {\n        method: 'POST',\n        redirect: 'follow'\n      })\n      .then(response => response.json())\n      .then(result => {setBrands(result.data) })\n      .catch(error => console.log('error', error));\n\n      let url2 =  process.env.REACT_APP_API_URL+\"category/list\"\n      fetch(url2, {\n        method: 'POST',\n        redirect: 'follow'\n      })\n        .then(response => response.json())\n        .then(result => {setCateogy(result.data) })\n        .catch(error => console.log('error', error));\n  }, [])\n\n\n\n\n\n\n \n\n  const [selectedImages, setSelectedImages] = useState([]);\n\n  const handleImageSelect = (imageId) => {\n    if (selectedImages.includes(imageId)) {\n      setSelectedImages(prevSelectedImages =>\n        prevSelectedImages.filter(id => id !== imageId)\n      );\n    } else {\n      setSelectedImages(prevSelectedImages => [...prevSelectedImages, imageId]);\n    }\n  };\n\n  // Handle image upload here\n  const handleImageUpload = (fileInput) => {\n    var formdata = new FormData();\n    formdata.append(\"image\", fileInput.files[0], fileInput.files[0].name);\n    formdata.append(\"type\", \"image\");\n\n    var requestOptions = {\n      method: 'POST',\n      body: formdata,\n      redirect: 'follow'\n    };\n\n    fetch(process.env.REACT_APP_API_URL + \"images/add\", requestOptions)\n      .then(response => response.json())\n      .then(result => {console.log(result); setSelectedImage(result.data)})\n      .catch(error => console.log('error', error));\n  };\n\n \n\n  const {id} = useParams();\n  console.log(JSON.stringify({_id:id}))\n  console.log(process.env.REACT_APP_API_URL+\"product/details\")\n  useState(()=>{\n    fetch(process.env.REACT_APP_API_URL+\"product/details\", {\n      method: 'POST',\n      headers: {\"Content-Type\": \"application/json\"},\n      body: JSON.stringify({_id:id}),\n      redirect: 'follow'\n    })\n      .then(response => response.json())\n      .then(result => {\n        console.log(\"API Response:\", result);\n        setProduct(result.data);\n        console.log(result.data.photo_gallery)\n        setSelectedGallery(result.data.photo_gallery);\n        setSelectedProd(result.data.relatedProducts);\n      })\n      .catch(error => console.log('error', error));\n  },[])\n\n      \n  return (\n    <>  \n    <ToastContainer />\n    <h1 className='headingType1 text-center mb-4'>Add New Product</h1>\n      <CCard >            \n          <CCardBody className='p-5'>\n              <CForm onSubmit={handelSubmit}>\n                <CRow className='g-4'>\n                  <CCol lg={8}>   \n                    <CRow>\n                      <CCol lg={6} className='mb-4'>\n                        <CFormInput placeholder='Product Name' label=\"Product Name\" name='product-name' defaultValue={product.product_name}/>\n                        <div className='hasError'>{error['product-name']}</div>\n                      </CCol>\n                      <CCol lg={6} className='mb-4'>                \n                        <CFormInput placeholder='Sku' label=\"Sku\" name='product-sku' defaultValue={product.sku}/>                        \n                      </CCol>\n                      <CCol lg={4} className='mb-4'>             \n                      <CFormSelect\n                        name=\"product-brand\"\n                        label=\"Select Brand\"\n                        value={product.brand?._id || \"\"}\n                        onChange={handleBrand}\n                      >\n                        <option value={\"\"}>Select Brand</option>\n                        {brands.map((item, key) => (\n                          <option key={key} value={item._id}>\n                            {item.brand_name}\n                          </option>\n                        ))}\n                      </CFormSelect>\n                          <div className='hasError'>{error[\"product-brand\"]}</div>\n                      </CCol>\n                      {/* <CCol lg={4} className='mb-4'>                  \n                          <CFormSelect name='product-category' label=\"Select Category\" value={product.category?._id || \"\"}  onChange={handleCategory}>\n                            <option value={\"\"}>Select Category</option>\n                            {category.map((item, key)=>(\n                              <option key={key} value={item._id}>{item.name}</option>\n                            ))}                            \n                          </CFormSelect>\n                          <div className='hasError'>{error[\"product-category\"]}</div>\n                      </CCol> */}\n                      <CCol lg={4} className='mb-4'>   \n                          {/* <label>Select Category</label>                     \n                          <CFormSelect>\n                            <option>Select Category</option>\n                          </CFormSelect> */}\n                      </CCol>\n                      <CCol lg={12} className='mb-4'>                \n                        <CFormTextarea placeholder='Description' label=\"Description\" name='short-description' rows={5} defaultValue={product.short_description}/>\n                        <div className='hasError'>{error[\"short_description\"]}</div>\n                      </CCol>\n                      <CCol lg={12} className='mb-4'> \n                        {/* <label className='form-label'>Long Description</label>\n                        <Editor\n                          editorState={editorState}\n                          onEditorStateChange={setEditorState}\n                        />    */}\n                        <div className=\"\">\n                          <label className='form-label '>Related Product</label>\n                          <ul className='selectedProducts'>\n                            {selectedProd.map((item,  key)=>(\n                              <li  key={key}><span> {item.product_name} <CIcon icon={cilX}  onClick={()=>handleDeleteProd(item)}/></span></li>\n                            ))}                            \n                          </ul>\n                          <div>\n                              <CFormInput type='text' placeholder='Search Related Product...' onChange={handelSearch}/>\n                              {prodVisible&& \n                              <ul className='searchReference'>\n                                {fProduct.map((item, key)=>(\n                                  <li key={key} onClick={()=>handleSelectProd(item)}>\n                                    <label>{item.product_name}</label>                                    \n                                  </li>                                  \n                                ))}\n                              </ul>}\n                          </div>\n                        </div>\n                      </CCol>\n                      {/* <CCol lg={6} className='mb-4'>                 \n                          <CFormInput type=\"file\" label=\"Video\" name='video'/>\n                      </CCol> */}\n                      <CCol lg={8} className='mb-4'>                                       \n                        <CFormInput type='text' label=\"Product Url\" defaultValue={product.product_url}/>\n                      </CCol>\n                      <CCol lg={4} className='mb-4'>                                       \n                        <CFormSelect name='status' label=\"Status\">\n                          <option value={\"1\"}>Active</option>\n                          <option value={\"0\"}>Inactive</option>\n                        </CFormSelect>\n                      </CCol>\n                      \n                        {/* <h5 className='mb-3 '>Specifications</h5> */}\n                        {/* <CTable bordered > \n                          <CTableHead>\n                            <CTableRow>\n                              <CTableHeaderCell>\n                                Property\n                              </CTableHeaderCell>\n                              <CTableHeaderCell>\n                                Value\n                              </CTableHeaderCell>\n                              <CTableHeaderCell>\n                                Edit\n                              </CTableHeaderCell>\n                            </CTableRow>\n                          </CTableHead>    \n                          <CTableBody>            \n                            {attr.map((i, key)=>(                            \n                                <CTableRow key={key}>\n                                  <CTableDataCell lg=\"true\">\n                                    {i.sProp}\n                                  </CTableDataCell>\n                                  <CTableDataCell lg=\"true\">\n                                    {i.sValue}\n                                  </CTableDataCell>\n                                  <CTableDataCell lg={\"auto\"} width={50}>\n                                    <div className='arInputWrapper'>\n                                      <CIcon icon={cilPencil} width={16} />\n                                    </div>\n                                  </CTableDataCell>\n                                </CTableRow>                           \n                            ))}\n                          </CTableBody>     \n                        </CTable> */}\n\n                      \n                        \n                        {/* <div className='each_attr_Wrap'>\n                          <CRow>\n                            <CCol lg>\n                              <CFormInput placeholder='Attribute Name' onChange={i=>setProps(i.target.value)} value={sprops}/>\n                            </CCol>\n                            <CCol lg>\n                              <CFormInput placeholder='Attribute Value' onChange={i=>setValue(i.target.value)} value={svalue}/>\n                            </CCol>\n                            <CCol lg={\"auto\"}>\n                              <CButton color='success' onClick={handleAdd}><CIcon icon={cilPlus} width={16} />Add Attribute</CButton>\n                            </CCol>\n                          </CRow>\n                        </div> */}\n                        \n\n                        \n\n                   \n          \n\n\n                    </CRow> \n                  </CCol>\n                  <CCol lg={4}>\n                    <div className='mb-4'>\n                      <h5>Product Image</h5>\n                      \n                      <div className='profileImage'>\n                        <img src={selectedImage.image?process.env.REACT_APP_BASE_URL+selectedImage.image: (product.photo && product.photo.image)?process.env.REACT_APP_BASE_URL+product.photo.image:noImage} width={'100%'} className='mb-3'/> \n                        <CFormInput type='file' onChange={(i)=>handleImageUpload(i.target)}/> \n                      </div>\n                      <CFormText component=\"span\" id=\"exampleFormControlInputHelpInline\">\n                      Product Image must be 1200px X 12000px and ( 72dpi if possible) \n                      </CFormText>\n                      {/* <CFormInput type='file' onChange={handleImageChange} name='profileImage' /> */}\n                    </div>\n                    <h5>Product Thumnails</h5>\n                    <ul className='arGalleryImg'> \n                      {gallery?.map((item, index) => (\n                        <li key={index}>                         \n                          <img  src={process.env.REACT_APP_BASE_URL+item.image} alt={item.name} />\n                        </li>\n                      ))}\n                      <li>\n                        <label htmlFor='myGallery' className='addGallery'>\n                          <CIcon icon={cilPlus}  />\n                        </label>\n                        <CFormInput id='myGallery' multiple={true} type='file' onChange={handleImageChange2} name='myGallery' />\n                      </li>\n                    </ul>\n                    <CFormText component=\"span\" id=\"exampleFormControlInputHelpInline\">\n                      Product Thumnails must be 1200px X 12000px and ( 72dpi if possible) \n                    </CFormText>\n                  </CCol>\n                  <CCol lg={12}  className='text-center'>\n                    <CButton color='primary' className='py-2 px-5' type='submit'>Submit</CButton>\n                  </CCol>\n                </CRow>\n              </CForm>\n          </CCardBody>\n      </CCard>\n      \n    </>\n  )\n}\n\nexport default EditProduct;\n"],"names":["_product$brand","Navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","selectedImage","setSelectedImage","_useState3","_useState4","gallery","setSelectedGallery","_useState5","_useState6","_useState7","_useState8","_useState9","_useState10","_useState11","_useState12","_useState13","_useState14","brands","setBrands","_useState15","_useState16","setCateogy","_useState17","_useState18","error","setError","_useState19","_useState20","_useState21","_useState22","totalProduct","setTotalProduct","_useState23","_useState24","fProduct","setFProduct","_useState25","_useState26","selectedProd","setSelectedProd","_useState27","_useState28","product","setProduct","_useState29","_useState30","prodVisible","setProdVisible","useEffect","fetch","process","method","redirect","then","response","json","result","data","catch","console","log","_useState31","EditorState","createEmpty","_useState32","_useState33","_useState34","id","useParams","JSON","stringify","_id","headers","body","photo_gallery","relatedProducts","_jsxs","_Fragment","children","_jsx","ToastContainer","className","CCard","CCardBody","CForm","onSubmit","e","preventDefault","_e$target","target","productName","productSku","productBrand","shortDescription","form_check","url","status","hasError","product_name","value","sku","short_description","brand","parseInt","product_url","photo","map","i","toast","success","message","setTimeout","CRow","CCol","lg","CFormInput","placeholder","label","name","defaultValue","CFormSelect","onChange","event","_objectSpread","item","key","brand_name","CFormTextarea","rows","CIcon","icon","cilX","onClick","prevSelectedProd","concat","_toConsumableArray","prevSelected","filter","type","regexPattern","RegExp","filteredProduct","match","src","image","noImage","width","fileInput","formdata","FormData","append","files","handleImageUpload","CFormText","component","index","alt","htmlFor","cilPlus","multiple","length","filePromises","Array","from","file","formData","Promise","all","responses","validResponses","prev","CButton","color"],"sourceRoot":""}