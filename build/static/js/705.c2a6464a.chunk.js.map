{"version":3,"file":"static/js/705.c2a6464a.chunk.js","mappings":"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","sources":["views/brand/BrandCategory.js"],"sourcesContent":["import { cilPencil, cilTrash } from '@coreui/icons';\nimport CIcon from '@coreui/icons-react';\nimport { CButton, CCard, CCardBody, CCol, CForm, CFormInput, CFormLabel, CFormSelect, CFormTextarea, CInputGroup, CInputGroupText, CRow, CTable, CTableBody, CTableDataCell, CTableHead, CTableHeaderCell, CTableRow } from '@coreui/react'\nimport React, { useEffect, useState } from 'react'\nimport { Link, useNavigate } from 'react-router-dom';\nimport { ToastContainer, toast } from 'react-toastify'\n\nconst BrandCategory = () => {\n  const [brand, setBrand] = useState([]);\n  const [error, setError] = useState({}); \n  const Navigate =  useNavigate();\n  const [validated, setValidated] = useState(false);\n  const [updateList, setUpdateList] = useState({}) \n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const form = e.currentTarget\n    if (form.checkValidity() === false) {     \n      e.stopPropagation()\n      return;\n    }\n    setValidated(true)\n    const [name, description, status] = e.target;\n\n\n  var requestOptions = {\n    method: 'POST',\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      \"brand_category_name\": name.value,\n      \"brand_category_description\": description.value,\n      \"status\": status.value\n    }),\n  };\n\n  fetch(process.env.REACT_APP_API_URL+\"brand-category/create\", requestOptions)\n  .then(response => response.json())\n  .then(result => {\n    if(result.status==200){\n      toast.success(result.message);\n      setUpdateList(result.data);\n      setValidated(false)\n      e.target.reset();\n    }else{\n      toast.error(result.message);\n    }\n  })\n  .catch(error => console.log('error', error));    \n  }\n\n  const handleDelete =(arg)=>{\n    let requestOptions = {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        \"_id\": arg\n      }),\n    };\n    const confirmWrp =  confirm(\"Are you sure you want to delete this?\");\n    if(!confirmWrp){\n      return;\n    }\n\n    fetch(process.env.REACT_APP_API_URL+\"brand-category/delete\", requestOptions)\n    .then(response => response.json())\n    .then(result => {\n      if(result.status==200){\n        toast.success(result.message);\n        setUpdateList({\"_id\": arg});\n        setValidated(false)\n        e.target.reset();\n      }else{\n        toast.error(result.message);\n      }\n    })\n    .catch(error => console.log('error', error)); \n  }\n\n\n  useEffect(() => {\n    var requestOptions = {\n      method: 'POST',\n      redirect: 'follow'\n    };\n\n    let url =  process.env.REACT_APP_API_URL+\"brand-category/list\"\n    fetch(url, requestOptions)\n    .then(response => response.json())\n    .then(result => { console.log(result.data); setBrand(result.data) })\n    .catch(error => console.log('error', error));\n\n  }, [updateList]);\n\n  return (\n    <>\n      <ToastContainer />\n      <CCard >            \n          <CCardBody>\n              <h1 className='headingType1 text-center mb-4'>Brand Category</h1>\n              <CRow className='justify-content-center'>\n                <CCol lg={4}>\n                  <CForm\n                  className=\"g-3 needs-validation\"\n                  noValidate\n                  validated={validated}\n                  onSubmit={handleSubmit}\n                >\n                  <div className='mb-4'>\n                    <CFormInput\n                      type=\"text\"\n                      defaultValue=\"\"\n                      feedbackInvalid=\"Please enter a Brand Name.\"\n                      id=\"validationCustom11\"\n                      label=\"Category name\"\n                      name='name'\n                      required\n                    />\n                  </div>\n                  <div className='mb-4'>\n                    <CFormTextarea\n                      defaultValue=\"\"\n                      feedbackInvalid=\"Please Select Status.\"\n                      label=\"Image\"\n                      id=\"validationCustom12\"\n                      name='description'\n                    />\n                  </div>\n                  <div className='mb-4'>\n                    <CFormSelect\n                      type=\"text\"\n                      defaultValue=\"\"\n                      feedbackInvalid=\"Please Select Status.\"\n                      id=\"validationCustom02\"\n                      label=\"Status\"\n                      name='status'\n                      required\n                    >\n                      <option value={\"1\"}>Active</option>\n                      <option value={\"0\"}>Inactive</option>\n                    </CFormSelect>\n                  </div>\n                  <div className='text-center mt-4'>\n                    <CButton color=\"primary\" type=\"submit\" className='py-2 px-5'>\n                      Add Brand Category\n                    </CButton>\n                  </div>\n                </CForm>\n                </CCol>\n                <CCol lg={8}>\n                <CTable bordered striped>\n                  <CTableHead>\n                    <CTableRow>\n                      {/* <CTableHeaderCell>\n                      Brand Id\n                      </CTableHeaderCell> */}\n                      <CTableHeaderCell width={150}>\n                        Name\n                      </CTableHeaderCell>\n                      <CTableHeaderCell>\n                        Description\n                      </CTableHeaderCell> \n                      <CTableHeaderCell>\n                        Status\n                      </CTableHeaderCell>\n                      <CTableHeaderCell width={100}>\n                        Action\n                      </CTableHeaderCell>\n                    </CTableRow>\n                  </CTableHead>\n                <CTableBody>\n                  {brand.map((i, key) => (\n                  <CTableRow key={key}>\n                    {/* <CTableDataCell width={120}>\n                      {i._id}\n                    </CTableDataCell> */}\n                    <CTableDataCell>\n                      {i.brand_category_name}\n                    </CTableDataCell>\n                    <CTableDataCell>\n                      {i.brand_category_description}\n                    </CTableDataCell>                  \n                    <CTableDataCell>\n                      {i.status == 0 ? <CButton color='warning'>Inactive</CButton> : <CButton color='success'>Active</CButton>}\n                    </CTableDataCell>\n                    <CTableDataCell>\n                      <ul className='actionBtnS'>\n                        <li>\n                          <CIcon onClick={()=>handleDelete(i._id)} icon={cilTrash} customClassName=\"nav-icon\" />\n                        </li>\n                        <li>\n                          <Link to={'/products/' + i._id}>\n                            <CIcon icon={cilPencil} customClassName=\"nav-icon\" />\n                          </Link>\n                        </li>\n                      </ul>\n                    </CTableDataCell>\n                  </CTableRow>\n                ))}\n                </CTableBody>\n                </CTable>\n\n                </CCol>\n              </CRow>\n              \n          </CCardBody>\n      </CCard>\n    </>\n  )\n}\n\nexport default BrandCategory\n"],"names":["_useState","useState","_useState2","_slicedToArray","brand","setBrand","_useState3","_useState4","_useState5","useNavigate","_useState6","validated","setValidated","_useState7","_useState8","updateList","setUpdateList","useEffect","fetch","process","method","redirect","then","response","json","result","console","log","data","catch","error","_jsxs","_Fragment","children","_jsx","ToastContainer","CCard","CCardBody","className","CRow","CCol","lg","CForm","noValidate","onSubmit","e","preventDefault","currentTarget","checkValidity","_e$target","target","name","description","status","requestOptions","headers","body","JSON","stringify","value","toast","success","message","reset","stopPropagation","CFormInput","type","defaultValue","feedbackInvalid","id","label","required","CFormTextarea","CFormSelect","CButton","color","CTable","bordered","striped","CTableHead","CTableRow","CTableHeaderCell","width","CTableBody","map","i","key","CTableDataCell","brand_category_name","brand_category_description","CIcon","onClick","arg","confirm","handleDelete","_id","icon","cilTrash","customClassName","Link","to","cilPencil"],"sourceRoot":""}